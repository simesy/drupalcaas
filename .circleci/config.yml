version: 2.1
executors:
  default:
    docker:
      - image: drupal:9.0.7-apache
      - image: mysql:5.7
        environment:
          MYSQL_DATABASE: default
          MYSQL_ROOT_PASSWORD: lilengine
      - image: selenium/standalone-chrome
commands:
  prepare_environment:
    description: "Prepare tooling, setup path for environment"
    steps:
      - run:
          name: Prepare tooling
          command: |
            # Prepare some variables to use in commands.
            ~/project/.circleci/prepare-environment-variables.sh
            # Install Git.
            apt update && apt install git -y
            # Install Mariadb Client for using mysql command like mysql, drush sql-cli ...
            apt install mariadb-client -y
            # Install Platformsh CLI to interact with Platformsh.
            curl -sS https://platform.sh/cli/installer | php
            echo "export PATH=$PATH:$HOME/.platformsh/bin" >> $BASH_ENV
            source ~/.bashrc
            # Skip host key checking for Platformsh
            mkdir -p ~/.ssh
            echo -e "Host *.platform.sh\n  StrictHostKeyChecking no" >> ~/.ssh/config
            # Make some project commands are able to call from terminal like drush, drupal, phpcs, phpunit...
            echo "export PATH=$PATH:$HOME/project/vendor/bin" >> $BASH_ENV
      - run:
          name: Prepare codebase
          command: |
            composer install -d ~/project
            rm -rf /var/www/html
            ln -s ~/project/web/ /var/www/html
  prepare_drupal:
    description: "Install Drupal instance ready for testing"
    steps:
      - run:
          name: Install Drupal
          command: |
            cd ~/project
            cp .circleci/phpunit.xml phpunit.xml
            cp .circleci/circleci.settings.php web/sites/default/local.settings.php
            composer install
            # We dont want dump prod db directly. Just force dump staging db if PLATFORMSH_ENVIRONMENT is master-production.
            if [[ ${PLATFORMSH_ENVIRONMENT} == 'master' ]]; then
              platform db:dump -f db.sql -p ${PLATFORMSH_PROJECT_ID} -e staging;
            else
              platform db:dump -f db.sql -p ${PLATFORMSH_PROJECT_ID} -e ${PLATFORMSH_ENVIRONMENT};
            fi
            # Import db from platform env, run update db, import config and clear cache.
            drush sql-cli < db.sql
            drush cr
            drush updb
            drush cim -y
            drush cr
  start_server:
    description: "Start web server ready for functional testing"
    steps:
      - run:
          name: Start server
          command: |
            chown -R www-data:www-data ~/project
            chmod -R 755 ~/project
            /etc/init.d/apache2 start
jobs:
  coding_standards:
    executor:
      name: default
    steps:
      - checkout
      - prepare_environment
      - run:
          name: Test coding standards
          command: phpcs
  phpunit_tests:
    executor:
      name: default
    steps:
      - checkout
      - prepare_environment
      - prepare_drupal
      - start_server
      - run:
          name: Run PHPUnit tests
          command: phpunit -c ./phpunit.xml
workflows:
  version: 2
  testing:
    jobs:
      - coding_standards:
          name: coding_standards
          filters:
            branches:
              ignore: master
      - phpunit_tests:
          name: phpunit_tests
          filters:
            branches:
              ignore: master
          requires:
            - coding_standards

