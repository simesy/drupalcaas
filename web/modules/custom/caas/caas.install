<?php

/**
 * @file
 * The caas install and update routines.
 */

use Drupal\Core\Link;
use Drupal\user\Entity\Role;

/**
 * Implements hook_requirements().
 */
function caas_requirements($phase) {
  $requirements = [];
  $api_role = Role::load('api');
  $anon_role = Role::load('anonymous');
  $auth_role = Role::load('authenticated');
  /** @var \Drupal\Core\Entity\EntityStorageInterface $consumer_storage */
  $consumer_storage = \Drupal::service('entity_type.manager')->getStorage('consumer');

  // Defaults, OK.
  $requirements['caas_inherited_roles'] = [
    'title' => t('Anon/auth access'),
    'value' => 'The anonymous and authenticated roles have no permissions.',
    'severity' => REQUIREMENT_OK,
  ];
  $requirements['caas_api_role'] = [
    'title' => t('API access'),
    'value' => 'The API role is configured correctly.',
    'severity' => REQUIREMENT_OK,
  ];
  $requirements['caas_consumers'] = [
    'title' => t('Consumers'),
    'value' => 'OAuth consumers are set up correctly.',
    'severity' => REQUIREMENT_OK,
  ];

  if ($phase == 'runtime') {
    // Ensure inherited roles provide no permissions.
    if ($anon_role->getPermissions() != [] || $auth_role->getPermissions() != []) {
      $requirements['caas_inherited_roles']['value'] = t('The %anon and %auth roles should not have any permissions. This makes it easier to ensure hardening. Please assign access via other roles as appropriate.',
        [
          '%anon' => Link::fromTextAndUrl($anon_role->id(), $anon_role->toUrl('edit-permissions-form'))->toString(),
          '%auth' => Link::fromTextAndUrl($auth_role->id(), $auth_role->toUrl('edit-permissions-form'))->toString(),
        ]
      );
      $requirements['caas_inherited_roles']['severity'] = REQUIREMENT_ERROR;
    }

    // Ensure API role is tight and read-only.
    $api_permissions = $api_role->getPermissions();
    asort($api_permissions);
    $differences = array_diff($api_permissions, [
      'access content',
      'access druxt resources',
      'caas bypass view access control',
      'view media',
    ]);
    if ($differences != []) {
      $requirements['caas_api_role']['value'] = t('The %role role should be restricted to read-only access. The following differences were detected:', ['%role' => Link::fromTextAndUrl($api_role->id(), $api_role->toUrl('edit-permissions-form'))->toString()]);
      $requirements['caas_api_role']['description'] = [
        '#type' => 'inline_template',
        '#template' => '{{ configuration_error_list }}',
        '#context' => [
          'configuration_error_list' => [
            '#theme' => 'item_list',
            '#items' => $differences,
          ],
        ],
      ];
      $requirements['caas_api_role']['severity'] = REQUIREMENT_ERROR;
    }

    // Ensure consumers are limited to API roles, hence read-only.
    $consumer_issues = [];
    foreach ($consumer_storage->loadMultiple() as $consumer) {
      foreach ($consumer->get('user_id')->referencedEntities() as $user) {
        if ($user->getRoles(TRUE) != ['api']) {
          $consumer_issues[] = t('The user %user assigned to the consumer %consumer should only have the API role.',
            [
              '%user' => Link::fromTextAndUrl($user->get('name')->value, $user->toUrl('edit-form'))->toString(),
              '%consumer' => Link::fromTextAndUrl($consumer->get('label')->value, $consumer->toUrl('edit-form'))->toString(),
            ]
          );
        }
      }
      foreach ($consumer->get('roles')->referencedEntities() as $role) {
        if ($role->id() != 'api') {
          $consumer_issues[] = t('The consumer %consumer should not be assigned to the role %role.',
            [
              '%consumer' => Link::fromTextAndUrl($consumer->get('label')->value, $consumer->toUrl('edit-form'))->toString(),
              '%role' => Link::fromTextAndUrl($role->id(), $role->toUrl('edit-permissions-form'))->toString(),
            ]
          );
        }
      }
    }
    if (count($consumer_issues)) {
      $requirements['caas_consumers']['value'] = t('Some issues were found with the consumer configuration.');
      $requirements['caas_consumers']['description'] = [
        '#type' => 'inline_template',
        '#template' => '{{ configuration_error_list }}',
        '#context' => [
          'configuration_error_list' => [
            '#theme' => 'item_list',
            '#items' => $consumer_issues,
          ],
        ],
      ];
      $requirements['caas_consumers']['severity'] = REQUIREMENT_ERROR;
    }
  }

  return $requirements;
}
